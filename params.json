{
  "name": "Tools",
  "tagline": "",
  "body": "# Introduction and licensing\r\nThis is a collection of different tools I had to develop.\r\nEverything in this repository is licensed under the Attribution-NonCommercial-ShareAlike 4.0 International License.\r\n\r\nThe collection is in a bit of a disarray and documentation need to be improved. \r\n\r\n#To do\r\n- Add tests\r\n- Split CommonTools into vtk only and itk/vtk parts\r\n- Doxygen documentation is outdated. Also need to correct the cmake files for the doxygen\r\n\r\n#Contents of subfolders\r\n##BasicMeshoperations\r\nA collection of random tools to use with meshes: mesh converters, mesh smoothers, distance transforms, etc.\r\n\r\n##DistTransform\r\nCalculates a distance transform on a mesh from a collection of seeds (uses fast marching)\r\nThe distance is calculated from blobs stored in vtkShortArray associated with the vertices. The distance of the point *point_id* to the blob *blob_id* is returned in array \"DT\" and can be accessed by\r\n```\r\narray = polydata.GetPointData().GetArray('DT')\r\ntuple = array.GetTuple(point_id)\r\ndistance = tuple[blob_id]\r\n```\r\nExample image (left - DT, right - red blob):\r\n\r\n![Distance Transform Image](https://raw.githubusercontent.com/cbutakoff/tools/master/Pics/distancetransform.gif)\r\n\r\n\r\n##FillSurfaceHoles\r\nImplementation similar to ReMesh. Detects and fills holes on the surface. Implements P. Liepa \"Filling Holes in Meshes\" without smoothing. Has 3 smoothing modes: none, inverse edge lengths and cotangent weights. Here's a sample result. \r\n\r\n![Hole Filling Image](https://raw.githubusercontent.com/cbutakoff/tools/master/Pics/HoleFilling.gif)\r\n\r\n\r\n\r\n\r\n##LVMeshFromMRI\r\nCreates a smoother mesh using splines longitudinally from short axis contours in MRI and a reference point.\r\nThis was ported from VTK 5.x and needs testing. There's also a python script in [Python/mri_mesh_from_contours](https://github.com/cbutakoff/tools/blob/master/Python/mri_mesh_from_contours). \r\nThe input shape are the landmarks in 3D. One of them is the reference point (which is either the first or the last or has a special ID). \r\nAlso it is possible that the IDs are used to differentiate between endocardiumn and epicardium. Check the code.\r\nExample reconstrautcion:\r\n\r\n![Remesh Image](https://raw.githubusercontent.com/cbutakoff/tools/master/Pics/mriremesh.gif)\r\n\r\nExample from the MRI corrector (only python)\r\n\r\n![Remesh Image](https://raw.githubusercontent.com/cbutakoff/tools/master/Pics/mricorrector.gif)\r\n\r\n\r\nTodo:\r\n- The code needs a better documentation\r\n- Python script was failing with the new VTK/mayavi\r\n- Compilation fails with vmtk from Ubuntu 16.04 distribution. Need a replacement. For now uniform remeshing is disabled.\r\n\r\n\r\n\r\n\r\n##Matlab\r\n- A landmarking tool for 2D images (Matlab).\r\n- ASM Fusion script (Matlab). Please cite my paper.\r\n\r\nTodo\r\n- Need to add an image\r\n\r\n##Python\r\nSome programs written in python. In particular mesh flattening.\r\n\r\n\r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}